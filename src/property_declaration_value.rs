use servo_css_parser::style::properties::PropertyDeclaration as Pd;
use servo_css_parser::style_traits::values::ToCss as StyleTraitToCss;

pub trait ValueToCss {
    fn value_to_css_string(self: &Self) -> String;
}

#[cfg_attr(feature = "cargo-clippy", allow(match_same_arms))]
impl ValueToCss for Pd {
    fn value_to_css_string(self: &Self) -> String {
        match *self {
            Pd::BackgroundColor(ref value) => value.to_css_string(),
            Pd::BackgroundImage(ref value) => value.to_css_string(),
            Pd::BackgroundPositionX(ref value) => value.to_css_string(),
            Pd::BackgroundPositionY(ref value) => value.to_css_string(),
            Pd::BackgroundRepeat(ref value) => value.to_css_string(),
            Pd::BackgroundAttachment(ref value) => value.to_css_string(),
            Pd::BackgroundClip(ref value) => value.to_css_string(),
            Pd::BackgroundOrigin(ref value) => value.to_css_string(),
            Pd::BackgroundSize(ref value) => value.to_css_string(),
            Pd::BorderTopColor(ref value) => value.to_css_string(),
            Pd::BorderTopStyle(ref value) => value.to_css_string(),
            Pd::BorderTopWidth(ref value) => value.to_css_string(),
            Pd::BorderLeftColor(ref value) => value.to_css_string(),
            Pd::BorderLeftStyle(ref value) => value.to_css_string(),
            Pd::BorderLeftWidth(ref value) => value.to_css_string(),
            Pd::BorderBottomColor(ref value) => value.to_css_string(),
            Pd::BorderBottomStyle(ref value) => value.to_css_string(),
            Pd::BorderBottomWidth(ref value) => value.to_css_string(),
            Pd::BorderRightColor(ref value) => value.to_css_string(),
            Pd::BorderRightStyle(ref value) => value.to_css_string(),
            Pd::BorderRightWidth(ref value) => value.to_css_string(),
            Pd::BorderBlockStartColor(ref value) => value.to_css_string(),
            Pd::BorderBlockStartStyle(ref value) => value.to_css_string(),
            Pd::BorderBlockStartWidth(ref value) => value.to_css_string(),
            Pd::BorderBlockEndColor(ref value) => value.to_css_string(),
            Pd::BorderBlockEndStyle(ref value) => value.to_css_string(),
            Pd::BorderBlockEndWidth(ref value) => value.to_css_string(),
            Pd::BorderInlineStartColor(ref value) => value.to_css_string(),
            Pd::BorderInlineStartStyle(ref value) => value.to_css_string(),
            Pd::BorderInlineStartWidth(ref value) => value.to_css_string(),
            Pd::BorderInlineEndColor(ref value) => value.to_css_string(),
            Pd::BorderInlineEndStyle(ref value) => value.to_css_string(),
            Pd::BorderInlineEndWidth(ref value) => value.to_css_string(),
            Pd::BorderTopLeftRadius(ref value) => value.to_css_string(),
            Pd::BorderTopRightRadius(ref value) => value.to_css_string(),
            Pd::BorderBottomRightRadius(ref value) => value.to_css_string(),
            Pd::BorderBottomLeftRadius(ref value) => value.to_css_string(),
            Pd::BorderImageSource(ref value) => value.to_css_string(),
            Pd::BorderImageOutset(ref value) => value.to_css_string(),
            Pd::BorderImageRepeat(ref value) => value.to_css_string(),
            Pd::BorderImageWidth(ref value) => value.to_css_string(),
            Pd::BorderImageSlice(ref value) => value.to_css_string(),
            Pd::Display(ref value) => value.to_css_string(),
            Pd::Position(ref value) => value.to_css_string(),
            Pd::Float(ref value) => value.to_css_string(),
            Pd::Clear(ref value) => value.to_css_string(),
            Pd::ServoDisplayForHypotheticalBox(ref value) => value.to_css_string(),
            Pd::VerticalAlign(ref value) => value.to_css_string(),
            Pd::ServoOverflowClipBox(ref value) => value.to_css_string(),
            Pd::OverflowX(ref value) => value.to_css_string(),
            Pd::OverflowY(ref value) => value.to_css_string(),
            Pd::TransitionDuration(ref value) => value.to_css_string(),
            Pd::TransitionTimingFunction(ref value) => value.to_css_string(),
            Pd::TransitionProperty(ref value) => value.to_css_string(),
            Pd::TransitionDelay(ref value) => value.to_css_string(),
            Pd::AnimationName(ref value) => value.to_css_string(),
            Pd::AnimationDuration(ref value) => value.to_css_string(),
            Pd::AnimationTimingFunction(ref value) => value.to_css_string(),
            Pd::AnimationIterationCount(ref value) => value.to_css_string(),
            Pd::AnimationDirection(ref value) => value.to_css_string(),
            Pd::AnimationPlayState(ref value) => value.to_css_string(),
            Pd::AnimationFillMode(ref value) => value.to_css_string(),
            Pd::AnimationDelay(ref value) => value.to_css_string(),
            Pd::Transform(ref value) => value.to_css_string(),
            Pd::Perspective(ref value) => value.to_css_string(),
            Pd::PerspectiveOrigin(ref value) => value.to_css_string(),
            Pd::BackfaceVisibility(ref value) => value.to_css_string(),
            Pd::TransformStyle(ref value) => value.to_css_string(),
            Pd::TransformOrigin(ref value) => value.to_css_string(),
            Pd::Color(ref value) => value.to_css_string(),
            Pd::ColumnWidth(ref value) => value.to_css_string(),
            Pd::ColumnCount(ref value) => value.to_css_string(),
            Pd::ColumnGap(ref value) => value.to_css_string(),
            Pd::Content(ref value) => value.to_css_string(),
            Pd::CounterIncrement(ref value) => value.to_css_string(),
            Pd::CounterReset(ref value) => value.to_css_string(),
            Pd::Opacity(ref value) => value.to_css_string(),
            Pd::BoxShadow(ref value) => value.to_css_string(),
            Pd::Clip(ref value) => value.to_css_string(),
            Pd::Filter(ref value) => value.to_css_string(),
            Pd::MixBlendMode(ref value) => value.to_css_string(),
            Pd::FontFamily(ref value) => value.to_css_string(),
            Pd::FontStyle(ref value) => value.to_css_string(),
            Pd::FontVariantCaps(ref value) => value.to_css_string(),
            Pd::FontWeight(ref value) => value.to_css_string(),
            Pd::FontSize(ref value) => value.to_css_string(),
            Pd::FontStretch(ref value) => value.to_css_string(),
            Pd::Visibility(ref value) => value.to_css_string(),
            Pd::WritingMode(ref value) => value.to_css_string(),
            Pd::Direction(ref value) => value.to_css_string(),
            Pd::ImageRendering(ref value) => value.to_css_string(),
            Pd::BorderCollapse(ref value) => value.to_css_string(),
            Pd::EmptyCells(ref value) => value.to_css_string(),
            Pd::CaptionSide(ref value) => value.to_css_string(),
            Pd::BorderSpacing(ref value) => value.to_css_string(),
            Pd::LineHeight(ref value) => value.to_css_string(),
            Pd::TextTransform(ref value) => value.to_css_string(),
            Pd::TextIndent(ref value) => value.to_css_string(),
            Pd::OverflowWrap(ref value) => value.to_css_string(),
            Pd::WordBreak(ref value) => value.to_css_string(),
            Pd::TextJustify(ref value) => value.to_css_string(),
            Pd::TextAlign(ref value) => value.to_css_string(),
            Pd::LetterSpacing(ref value) => value.to_css_string(),
            Pd::WordSpacing(ref value) => value.to_css_string(),
            Pd::ServoTextDecorationsInEffect(ref value) => value.to_css_string(),
            Pd::WhiteSpace(ref value) => value.to_css_string(),
            Pd::TextShadow(ref value) => value.to_css_string(),
            Pd::TextRendering(ref value) => value.to_css_string(),
            Pd::ListStylePosition(ref value) => value.to_css_string(),
            Pd::ListStyleType(ref value) => value.to_css_string(),
            Pd::ListStyleImage(ref value) => value.to_css_string(),
            Pd::Quotes(ref value) => value.to_css_string(),
            Pd::MarginTop(ref value) => value.to_css_string(),
            Pd::MarginLeft(ref value) => value.to_css_string(),
            Pd::MarginBottom(ref value) => value.to_css_string(),
            Pd::MarginRight(ref value) => value.to_css_string(),
            Pd::MarginBlockStart(ref value) => value.to_css_string(),
            Pd::MarginBlockEnd(ref value) => value.to_css_string(),
            Pd::MarginInlineStart(ref value) => value.to_css_string(),
            Pd::MarginInlineEnd(ref value) => value.to_css_string(),
            Pd::OutlineColor(ref value) => value.to_css_string(),
            Pd::OutlineStyle(ref value) => value.to_css_string(),
            Pd::OutlineWidth(ref value) => value.to_css_string(),
            Pd::OutlineOffset(ref value) => value.to_css_string(),
            Pd::PaddingTop(ref value) => value.to_css_string(),
            Pd::PaddingLeft(ref value) => value.to_css_string(),
            Pd::PaddingBottom(ref value) => value.to_css_string(),
            Pd::PaddingRight(ref value) => value.to_css_string(),
            Pd::PaddingBlockStart(ref value) => value.to_css_string(),
            Pd::PaddingBlockEnd(ref value) => value.to_css_string(),
            Pd::PaddingInlineStart(ref value) => value.to_css_string(),
            Pd::PaddingInlineEnd(ref value) => value.to_css_string(),
            Pd::Cursor(ref value) => value.to_css_string(),
            Pd::PointerEvents(ref value) => value.to_css_string(),
            Pd::Top(ref value) => value.to_css_string(),
            Pd::Left(ref value) => value.to_css_string(),
            Pd::Bottom(ref value) => value.to_css_string(),
            Pd::Right(ref value) => value.to_css_string(),
            Pd::OffsetBlockStart(ref value) => value.to_css_string(),
            Pd::OffsetBlockEnd(ref value) => value.to_css_string(),
            Pd::OffsetInlineStart(ref value) => value.to_css_string(),
            Pd::OffsetInlineEnd(ref value) => value.to_css_string(),
            Pd::ZIndex(ref value) => value.to_css_string(),
            Pd::FlexDirection(ref value) => value.to_css_string(),
            Pd::FlexWrap(ref value) => value.to_css_string(),
            Pd::JustifyContent(ref value) => value.to_css_string(),
            Pd::AlignContent(ref value) => value.to_css_string(),
            Pd::AlignItems(ref value) => value.to_css_string(),
            Pd::FlexGrow(ref value) => value.to_css_string(),
            Pd::FlexShrink(ref value) => value.to_css_string(),
            Pd::AlignSelf(ref value) => value.to_css_string(),
            Pd::Order(ref value) => value.to_css_string(),
            Pd::FlexBasis(ref value) => value.to_css_string(),
            Pd::Width(ref value) => value.to_css_string(),
            Pd::MinWidth(ref value) => value.to_css_string(),
            Pd::MaxWidth(ref value) => value.to_css_string(),
            Pd::Height(ref value) => value.to_css_string(),
            Pd::MinHeight(ref value) => value.to_css_string(),
            Pd::MaxHeight(ref value) => value.to_css_string(),
            Pd::BlockSize(ref value) => value.to_css_string(),
            Pd::MinBlockSize(ref value) => value.to_css_string(),
            Pd::MaxBlockSize(ref value) => value.to_css_string(),
            Pd::InlineSize(ref value) => value.to_css_string(),
            Pd::MinInlineSize(ref value) => value.to_css_string(),
            Pd::MaxInlineSize(ref value) => value.to_css_string(),
            Pd::BoxSizing(ref value) => value.to_css_string(),
            Pd::TableLayout(ref value) => value.to_css_string(),
            Pd::TextOverflow(ref value) => value.to_css_string(),
            Pd::UnicodeBidi(ref value) => value.to_css_string(),
            Pd::TextDecorationLine(ref value) => value.to_css_string(),
            Pd::CSSWideKeyword(..) => String::new(),
            Pd::WithVariables(..) => String::new(),
            Pd::Custom(..) => String::new(),
        }
    }
}

pub fn property_declaration_value_to_css_string(property_declaration: &Pd) -> String {
    property_declaration.value_to_css_string()
}
