use servo_css_parser::style::properties::PropertyDeclaration;
use servo_css_parser::style_traits::values::ToCss as StyleTraitToCss;

pub trait ValueToCss {
    fn value_to_css_string(self: &Self) -> String;
}

impl ValueToCss for PropertyDeclaration {
    fn value_to_css_string(self: &Self) -> String {
        match self {
            &PropertyDeclaration::BackgroundColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundImage(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundPositionX(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundPositionY(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundRepeat(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundAttachment(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundClip(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundOrigin(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackgroundSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderTopColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderTopStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderTopWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderLeftColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderLeftStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderLeftWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBottomColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBottomStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBottomWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderRightColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderRightStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderRightWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBlockStartColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBlockStartStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBlockStartWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBlockEndColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBlockEndStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBlockEndWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderInlineStartColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderInlineStartStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderInlineStartWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderInlineEndColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderInlineEndStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderInlineEndWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderTopLeftRadius(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderTopRightRadius(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBottomRightRadius(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderBottomLeftRadius(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderImageSource(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderImageOutset(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderImageRepeat(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderImageWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderImageSlice(ref value) => value.to_css_string(),
            &PropertyDeclaration::Display(ref value) => value.to_css_string(),
            &PropertyDeclaration::Position(ref value) => value.to_css_string(),
            &PropertyDeclaration::Float(ref value) => value.to_css_string(),
            &PropertyDeclaration::Clear(ref value) => value.to_css_string(),
            &PropertyDeclaration::ServoDisplayForHypotheticalBox(ref value) => value.to_css_string(),
            &PropertyDeclaration::VerticalAlign(ref value) => value.to_css_string(),
            &PropertyDeclaration::ServoOverflowClipBox(ref value) => value.to_css_string(),
            &PropertyDeclaration::OverflowX(ref value) => value.to_css_string(),
            &PropertyDeclaration::OverflowY(ref value) => value.to_css_string(),
            &PropertyDeclaration::TransitionDuration(ref value) => value.to_css_string(),
            &PropertyDeclaration::TransitionTimingFunction(ref value) => value.to_css_string(),
            &PropertyDeclaration::TransitionProperty(ref value) => value.to_css_string(),
            &PropertyDeclaration::TransitionDelay(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationName(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationDuration(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationTimingFunction(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationIterationCount(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationDirection(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationPlayState(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationFillMode(ref value) => value.to_css_string(),
            &PropertyDeclaration::AnimationDelay(ref value) => value.to_css_string(),
            &PropertyDeclaration::Transform(ref value) => value.to_css_string(),
            &PropertyDeclaration::Perspective(ref value) => value.to_css_string(),
            &PropertyDeclaration::PerspectiveOrigin(ref value) => value.to_css_string(),
            &PropertyDeclaration::BackfaceVisibility(ref value) => value.to_css_string(),
            &PropertyDeclaration::TransformStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::TransformOrigin(ref value) => value.to_css_string(),
            &PropertyDeclaration::Color(ref value) => value.to_css_string(),
            &PropertyDeclaration::ColumnWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::ColumnCount(ref value) => value.to_css_string(),
            &PropertyDeclaration::ColumnGap(ref value) => value.to_css_string(),
            &PropertyDeclaration::Content(ref value) => value.to_css_string(),
            &PropertyDeclaration::CounterIncrement(ref value) => value.to_css_string(),
            &PropertyDeclaration::CounterReset(ref value) => value.to_css_string(),
            &PropertyDeclaration::Opacity(ref value) => value.to_css_string(),
            &PropertyDeclaration::BoxShadow(ref value) => value.to_css_string(),
            &PropertyDeclaration::Clip(ref value) => value.to_css_string(),
            &PropertyDeclaration::Filter(ref value) => value.to_css_string(),
            &PropertyDeclaration::MixBlendMode(ref value) => value.to_css_string(),
            &PropertyDeclaration::FontFamily(ref value) => value.to_css_string(),
            &PropertyDeclaration::FontStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::FontVariantCaps(ref value) => value.to_css_string(),
            &PropertyDeclaration::FontWeight(ref value) => value.to_css_string(),
            &PropertyDeclaration::FontSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::FontStretch(ref value) => value.to_css_string(),
            &PropertyDeclaration::Visibility(ref value) => value.to_css_string(),
            &PropertyDeclaration::WritingMode(ref value) => value.to_css_string(),
            &PropertyDeclaration::Direction(ref value) => value.to_css_string(),
            &PropertyDeclaration::ImageRendering(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderCollapse(ref value) => value.to_css_string(),
            &PropertyDeclaration::EmptyCells(ref value) => value.to_css_string(),
            &PropertyDeclaration::CaptionSide(ref value) => value.to_css_string(),
            &PropertyDeclaration::BorderSpacing(ref value) => value.to_css_string(),
            &PropertyDeclaration::LineHeight(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextTransform(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextIndent(ref value) => value.to_css_string(),
            &PropertyDeclaration::OverflowWrap(ref value) => value.to_css_string(),
            &PropertyDeclaration::WordBreak(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextJustify(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextAlign(ref value) => value.to_css_string(),
            &PropertyDeclaration::LetterSpacing(ref value) => value.to_css_string(),
            &PropertyDeclaration::WordSpacing(ref value) => value.to_css_string(),
            &PropertyDeclaration::ServoTextDecorationsInEffect(ref value) => value.to_css_string(),
            &PropertyDeclaration::WhiteSpace(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextShadow(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextRendering(ref value) => value.to_css_string(),
            &PropertyDeclaration::ListStylePosition(ref value) => value.to_css_string(),
            &PropertyDeclaration::ListStyleType(ref value) => value.to_css_string(),
            &PropertyDeclaration::ListStyleImage(ref value) => value.to_css_string(),
            &PropertyDeclaration::Quotes(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginTop(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginLeft(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginBottom(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginRight(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginBlockStart(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginBlockEnd(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginInlineStart(ref value) => value.to_css_string(),
            &PropertyDeclaration::MarginInlineEnd(ref value) => value.to_css_string(),
            &PropertyDeclaration::OutlineColor(ref value) => value.to_css_string(),
            &PropertyDeclaration::OutlineStyle(ref value) => value.to_css_string(),
            &PropertyDeclaration::OutlineWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::OutlineOffset(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingTop(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingLeft(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingBottom(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingRight(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingBlockStart(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingBlockEnd(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingInlineStart(ref value) => value.to_css_string(),
            &PropertyDeclaration::PaddingInlineEnd(ref value) => value.to_css_string(),
            &PropertyDeclaration::Cursor(ref value) => value.to_css_string(),
            &PropertyDeclaration::PointerEvents(ref value) => value.to_css_string(),
            &PropertyDeclaration::Top(ref value) => value.to_css_string(),
            &PropertyDeclaration::Left(ref value) => value.to_css_string(),
            &PropertyDeclaration::Bottom(ref value) => value.to_css_string(),
            &PropertyDeclaration::Right(ref value) => value.to_css_string(),
            &PropertyDeclaration::OffsetBlockStart(ref value) => value.to_css_string(),
            &PropertyDeclaration::OffsetBlockEnd(ref value) => value.to_css_string(),
            &PropertyDeclaration::OffsetInlineStart(ref value) => value.to_css_string(),
            &PropertyDeclaration::OffsetInlineEnd(ref value) => value.to_css_string(),
            &PropertyDeclaration::ZIndex(ref value) => value.to_css_string(),
            &PropertyDeclaration::FlexDirection(ref value) => value.to_css_string(),
            &PropertyDeclaration::FlexWrap(ref value) => value.to_css_string(),
            &PropertyDeclaration::JustifyContent(ref value) => value.to_css_string(),
            &PropertyDeclaration::AlignContent(ref value) => value.to_css_string(),
            &PropertyDeclaration::AlignItems(ref value) => value.to_css_string(),
            &PropertyDeclaration::FlexGrow(ref value) => value.to_css_string(),
            &PropertyDeclaration::FlexShrink(ref value) => value.to_css_string(),
            &PropertyDeclaration::AlignSelf(ref value) => value.to_css_string(),
            &PropertyDeclaration::Order(ref value) => value.to_css_string(),
            &PropertyDeclaration::FlexBasis(ref value) => value.to_css_string(),
            &PropertyDeclaration::Width(ref value) => value.to_css_string(),
            &PropertyDeclaration::MinWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::MaxWidth(ref value) => value.to_css_string(),
            &PropertyDeclaration::Height(ref value) => value.to_css_string(),
            &PropertyDeclaration::MinHeight(ref value) => value.to_css_string(),
            &PropertyDeclaration::MaxHeight(ref value) => value.to_css_string(),
            &PropertyDeclaration::BlockSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::MinBlockSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::MaxBlockSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::InlineSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::MinInlineSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::MaxInlineSize(ref value) => value.to_css_string(),
            &PropertyDeclaration::BoxSizing(ref value) => value.to_css_string(),
            &PropertyDeclaration::TableLayout(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextOverflow(ref value) => value.to_css_string(),
            &PropertyDeclaration::UnicodeBidi(ref value) => value.to_css_string(),
            &PropertyDeclaration::TextDecorationLine(ref value) => value.to_css_string(),
            &PropertyDeclaration::CSSWideKeyword(..) => String::new(),
            &PropertyDeclaration::WithVariables(..) => String::new(),
            &PropertyDeclaration::Custom(..) => String::new(),
        }
    }
}

pub fn property_declaration_value_to_css_string(property_declaration: &PropertyDeclaration) -> String {
    property_declaration.value_to_css_string()
}
